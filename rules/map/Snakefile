rule bwa:
    # Do the alignment, read paring, introduction of the read groups, sam-import and sorting on a pipe. Paired-end flavour
    input:
        forward=lambda wildcards: "%s%s%s/%s/%s_R1.fastq.gz" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['xenograft_check'], get_kind_of_run(wildcards, SAMPLESHEETS, config), wildcards.sample),
        reverse=lambda wildcards: get_reverse_file("%s%s%s/Paired/%s_R2.fastq.gz" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['xenograft_check'], wildcards.sample), wildcards, SAMPLESHEETS, config),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']]
    output:
        human="{prefix}%s%s/{sample}.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['map']),
        nonhuman="{prefix}%s%s/{sample}.bam" % (config['dirs']['intermediate'], config['stepnames']['nonhuman'])
    log:
        bwa_mem="{prefix}%s%s/{sample}.bwa_mem.log" % (config['dirs']['logs'], config['stepnames']['map']),
        sam_view="{prefix}%s%s/{sample}.samtools_view.log" % (config['dirs']['logs'], config['stepnames']['map']),
        sam_sort="{prefix}%s%s/{sample}.samtools_sort.log" % (config['dirs']['logs'], config['stepnames']['map']),
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['map'])
    conda:
        "envs/spike_map.yaml"
    threads:
        3
    params:
        header=lambda wildcards: get_bwa_mem_header(wildcards.sample, SAMPLESHEETS, config)
    shell:
        # wow: I just saw that the number of threads has an impact on the results!
        # thus, for the moment, we should use the same number of threads as Michael's
        # original pipeline, which is 3
        'bwa mem -t {threads} -v 2 -M'
        '{params.header}'
        ' {input.references[0]}'
        ' {input.forward} {input.reverse} 2> {log.bwa_mem}'
        ' | samtools view -bSu -F 0x04 -U {output.nonhuman} - 2> {log.sam_view}'
        ' | samtools sort -m 1G -@ {threads} - {output.human} 2> {log.sam_sort}'
        # samtools appends .bam to given filename, which is different from snakemakes assumption and thus must be fixed here manually
        ' && mv {output.human}.bam {output.human}'

        #"@RG\tID:180614_SN737_0438_BCC7MCACXX\tCN:Department_of_Pediatric_Oncology_Dusseldorf\tPU:BCC7MCACXX\tDT:2018/06/14\tPL:ILLUMINA\tLB:SureSelectXTV5plusUTRautomated\tSM:readgroups.info"
        #bwa mem -t $(NT_MINUS_ONE) -v 1 -M $(shell getReadGroupStringFromFilename_2015.pl $*) $(REF) $*_R1.fastq.gz $*_R2.fastq.gz |
        #$(SAMTOOLS_PATH_2k15)/samtools view -bSu -F 0x04 - |
        #$(SAMTOOLS_PATH_2k15)/samtools sort -m 1G -@ 1 - $@.tmp     $(STDERR_TO_LOG) \
	    #&& mv $@.tmp.bam $@

        #MOUSE: $(BWA_PATH_2k15)/bwa mem -t $(NT_MINUS_ONE) -v 1 -M $(shell getReadGroupStringFromFilename_2015.pl $*) $(MOUSE_REF) $*.fastq.gz                   |
        #MOUSE: $(SAMTOOLS_PATH_2k15)/samtools view -bSu -F 0x04 - |
        #MOUSE: $(SAMTOOLS_PATH_2k15)/samtools sort -m 1G -@ 1 - $@.tmp     $(STDERR_TO_LOG) \


rule remove_pcr_duplicates:
    # Remove PCR duplicates from the reads
    input:
        "{prefix}%s%s/{sample}.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['map'])
    output:
        bam="{prefix}%s%s/{sample}.nodup.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['nodup']),
        bai="{prefix}%s%s/{sample}.nodup.srt.bai" % (config['dirs']['intermediate'], config['stepnames']['nodup']),
        metric="{prefix}%s%s/{sample}.nodup.srt.bam.metrics" % (config['dirs']['intermediate'], config['stepnames']['nodup']),
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['nodup'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['nodup'])
    conda:
        "envs/spike_map.yaml"
    threads:
        1  # since this picard tools function doesn't support multithreading :-(
    shell:
        "java"
        " -Xmx4g"
        " -XX:ParallelGCThreads={threads}"
        " -jar ${{CONDA_PREFIX}}/share/picard-2.0.1-1/picard.jar"
        " MarkDuplicates"
        " INPUT={input}"
        " METRICS_FILE={output.metric}"
        " REMOVE_DUPLICATES=true"
        " ASSUME_SORTED=true"
        " VALIDATION_STRINGENCY=LENIENT"
        " CREATE_INDEX=true"
        " OUTPUT={output.bam}"
        " > {log} 2>&1"

        # %.nodup.srt.bam: %.srt.bam
        # 	@echo "$(DATE) ######### Alignment: Removing PCR duplicates in '$<'"
        #  	picardtools_2015.sh picard.jar MarkDuplicates INPUT=$< METRICS_FILE=$@.metrics REMOVE_DUPLICATES=true ASSUME_SORTED=true  VALIDATION_STRINGENCY=LENIENT CREATE_INDEX=true OUTPUT=$@.tmp  $(BOTH_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.bai $@.bai
        #     # The $@.metrics file contains how many reads were processed / duplicate
