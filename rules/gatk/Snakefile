rule gatk_RealignerTargetCreator:
    # Preprocessing to do a realignment of the reads with GATK
    input:
        bam=rules.remove_pcr_duplicates.output.bam,
        bai=rules.remove_pcr_duplicates.output.bai,
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        exometrack=lambda wildcards: "%s%s%s" % (config['dirs']['prefix'], config['dirs']['references'], get_reference_exometrack(wildcards.sample, SAMPLESHEETS, config)),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        knowns=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], known['file'], ending) for known in get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'RealignerTargetCreator') for ending in ['', ('.tbi' if known['file'].endswith('.gz') else '.idx')]],
    output:
        "{prefix}%s%s/{sample}.nodup.srt.bam.intervals" % (config['dirs']['intermediate'], config['stepnames']['gatk_RealignerTargetCreator'])
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['gatk_RealignerTargetCreator'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_RealignerTargetCreator'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1 # random numbergenerator seems to depend on number of threads, such that results are non deterministic if not using only one thread :-/
    params:
        knowns_settings=lambda wildcards: [' -known %s%s%s ' % (wildcards.prefix, config['dirs']['references'], known['file']) for known in get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'RealignerTargetCreator')],
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T RealignerTargetCreator"
        " -nt {threads}"
        " -L {input.exometrack}"
        " -I {input.bam}"
        " -R {input.references[0]}"
        "{params.knowns_settings}"
        " --out {output}"
        " 2>> {log}"
        " && chmod -v g+w {output} 2>> {log}"

        #       gatk_2015.sh GenomeAnalysisTK.jar -T RealignerTargetCreator -nt $(NUM_THREADS) -L $(EXOME_TRACK) -I $< -R $(REF)       -known $(GATKRES_PATH_2k15)/Mills_and_1000G_gold_standard.indels.b37.vcf -known $(GATKRES_PATH_2k15)/1000G_phase1.indels.b37.vcf --out $@.tmp  $(OUTPUT_TO_LOG) \
	    #MOUSE: gatk_2015.sh GenomeAnalysisTK.jar -T RealignerTargetCreator -nt $(NUM_THREADS) -L $(EXOME_TRACK) -I $< -R $(MOUSE_REF) -known /data/biotools/reference/mgp_indels/C57BL6NJ_CBAJDBA2.indels.vcf.gz                                                       --out $@.tmp  $(OUTPUT_TO_LOG) \


rule gatk_IndelRealigner:
    # Realign the the reads
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        bam=rules.remove_pcr_duplicates.output.bam,
        intervals=rules.gatk_RealignerTargetCreator.output
    output:
        bam="{prefix}%s%s/{sample}.reAl.nodup.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['gatk_IndelRealigner']),
        bai="{prefix}%s%s/{sample}.reAl.nodup.srt.bai" % (config['dirs']['intermediate'], config['stepnames']['gatk_IndelRealigner'])
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['gatk_IndelRealigner'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_IndelRealigner'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1  # since this GATK tool does not support multithreading
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T IndelRealigner"
        " -I {input.bam}"
        " -R {input.references[0]}"
        " -targetIntervals {input.intervals}"
        " --out {output.bam}"
        " 2>> {log}"

        # %.reAl.nodup.srt.bam: %.nodup.srt.bam.intervals
        # 	@echo "$(DATE) ######### Alignment: Realigning BAM file to $@ #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T IndelRealigner -I $(<:.intervals=) -R $(REF) -targetIntervals $< --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # # GATK creates an index, but in this rule with the wrong name *.bam.tmp.bai; to fix this:
        # 	-mv $@.tmp.bai $@.bai


rule gatk_BaseRecalibrator:
    # Preprocessing to do a base quality score recalibration with GATK
    input:
        knowns=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], known['file'], ending) for known in (get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'BaseRecalibrator')) for ending in ['', ('.tbi' if known['file'].endswith('.gz') else '.idx')]],
        exometrack=lambda wildcards: "%s%s%s" % (config['dirs']['prefix'], config['dirs']['references'], get_reference_exometrack(wildcards.sample, SAMPLESHEETS, config)),
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        bam=rules.gatk_IndelRealigner.output.bam,
    output:
        "{prefix}%s%s/{sample}.reAl.nodup.srt.bam.recal_data.csv" % (config['dirs']['intermediate'], config['stepnames']['gatk_BaseRecalibrator']),
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['gatk_BaseRecalibrator'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_BaseRecalibrator'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        3
    params:
        knowns_settings=lambda wildcards: [' -knownSites %s%s%s ' % (wildcards.prefix, config['dirs']['references'], known['file']) for known in (get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'BaseRecalibrator'))],
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T BaseRecalibrator"
        " -nct {threads}"
        " -L {input.exometrack}"
        " -I {input.bam}"
        " -R {input.references[0]}"
        "{params.knowns_settings}"
        " -o {output}"
        " 2>> {log} 1>&2"

        # %.reAl.nodup.srt.bam.recal_data.csv: %.reAl.nodup.srt.bam
        # 	@echo "$(DATE) ######### Alignment: Count covariates. First step of base quality score recalibration for '$<' #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T BaseRecalibrator -nct $(NT_MINUS_ONE) -L $(EXOME_TRACK) -I $< -R $(REF) -knownSites $(DBSNP) -knownSites $(GATKRES_PATH_2k15)/Mills_and_1000G_gold_standard.indels.b37.vcf -knownSites $(GATKRES_PATH_2k15)/dbsnp_138.b37.vcf -knownSites $(GATKRES_PATH_2k15)/1000G_phase1.indels.b37.vcf -o $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@


rule gatk_PrintReads:
    # Preprocessing to do a base quality score recalibration with GATK
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        csv=rules.gatk_BaseRecalibrator.output,
        bam=rules.gatk_IndelRealigner.output.bam
    output:
        bam="{prefix}%s%s/{sample}.reCal.reAl.nodup.srt.bam" % (config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads']),
        bai="{prefix}%s%s/{sample}.reCal.reAl.nodup.srt.bai" % (config['dirs']['intermediate'], config['stepnames']['gatk_PrintReads'])
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['gatk_PrintReads'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_PrintReads'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        16
    params:
        disable=lambda wildcards: " --disable_indel_quals" if get_species(wildcards.sample, SAMPLESHEETS, config) == 'homo sapiens' else ""
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx16g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T PrintReads"
        " -nct {threads}"
        "{params.disable}"
        " -R {input.references[0]}"
        " -BQSR {input.csv}"
        " -I {input.bam}"
        " -o {output.bam}"
        " 2>> {log}"

        # # Do the quality score recalibration
        # # added disable_indel_quals for better file sizes according to GATK recommendations
        # %.reCal.reAl.nodup.srt.bam: %.reAl.nodup.srt.bam.recal_data.csv
        # 	@echo "$(DATE) ######### Alignment: Base quality score recalibration to $@ #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T PrintReads -nct $(NT_MINUS_ONE) --disable_indel_quals -R $(REF) -BQSR $< -I $(<:.recal_data.csv=) -o $@.tmp \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.bai $@.bai
        # 	-exome_coverage.sh $@ $(EXOME_TRACK)


rule exome_coverage:
    # produce exome coverage statistics for a sample
    input:
        bam=rules.gatk_PrintReads.output.bam,
        exometrack=lambda wildcards: "%s%s%s" % (config['dirs']['prefix'], config['dirs']['references'], get_reference_exometrack(wildcards.sample, SAMPLESHEETS, config)),
    output:
        csv="{prefix}%s%s/{sample}.exome_coverage.csv" % (config['dirs']['intermediate'], config['stepnames']['exome_coverage']),
    log:
        bedtools="{prefix}%s%s/{sample}.bedtools.log" % (config['dirs']['logs'], config['stepnames']['exome_coverage']),
        gawk="{prefix}%s%s/{sample}.gawk.log" % (config['dirs']['logs'], config['stepnames']['exome_coverage'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['exome_coverage'])
    conda:
        "envs/spike_bedtools.yaml"
    threads:
        1
    shell:
        'echo "#coverage\tnumber_bases\ttotal_bases\tpercent_cumulative" > {output} && '
        'bedtools'
        ' coverage'
        ' -abam {input.bam}'
        ' -b {input.exometrack}'
        ' -hist'
        ' 2> {log.bedtools}'
        ' | gawk \'BEGIN {{ FS="\t";OFS="\t"}} $1~"^all" {{print $2,$3,$4,(($4-sum)/($4+1)*100); sum+=$3}}\''
        ' >> {output}'
        " 2> {log.gawk}"
        # 	-exome_coverage.sh $@ $(EXOME_TRACK)


rule gatk_HaplotypeCaller:
    # Call SNPs and Indels (using --genotype_likelihoods_model BOTH )
    input:
        exometrack=lambda wildcards: "%s%s%s" % (config['dirs']['prefix'], config['dirs']['references'], get_reference_exometrack(wildcards.sample, SAMPLESHEETS, config)),
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        bam=rules.gatk_PrintReads.output.bam,
        bai=rules.gatk_PrintReads.output.bai
    output:
        vcf="{prefix}%s%s/{sample}.gatk.raw_calls.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_HaplotypeCaller']),
        idx="{prefix}%s%s/{sample}.gatk.raw_calls.vcf.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_HaplotypeCaller'])
    log:
        # gatk in path, since platypus outputs into same stepname
        "{prefix}%s%s/gatk/{sample}.log" % (config['dirs']['logs'], config['stepnames']['gatk_HaplotypeCaller'])
    benchmark:
        "{prefix}%s%s/gatk/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_HaplotypeCaller'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1  # we need to fix the number of threads to 1, since otherwise results are non-deterministic across multiple runs, i.e. not reproducible!!
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T HaplotypeCaller"
        " -I {input.bam}"
        " --genotyping_mode DISCOVERY"
        " -L {input.exometrack}"
        " -nct {threads}"
        " -R {input.references[0]}"
        " {config[gatk][HaplotypeCallerQualityArguments]}"
        " --out {output.vcf}"
        " 2>> {log}"

        # ####Call the SNPs
        # #Call SNPs and Indels (using --genotype_likelihoods_model BOTH )
        # # old gatk_2015.sh GenomeAnalysisTK.jar -T UnifiedGenotyper -I $< --genotype_likelihoods_model BOTH -nt $(NUM_THREADS) -R $(REF) -baq CALCULATE_AS_NECESSARY --dbsnp $(DBSNP) $(UnifiedGenotyperQualityArguments) --out $@.tmp  $(OUTPUT_TO_LOG) \
        # # Breaking the Thread number pattern, I want more speed here
        # # gatk_2015.sh GenomeAnalysisTK.jar -T HaplotypeCaller -I $< --genotyping_mode DISCOVERY -L $(EXOME_TRACK)-nct $(NUM_THREADS) -R $(REF) $(HaplotypeCallerQualityArguments) --out $@.tmp  $(OUTPUT_TO_LOG) \
        #
        # %.gatk.raw_calls.vcf: %.reCal.reAl.nodup.srt.bam %.reCal.reAl.nodup.srt.bam.bai
        # 	@echo "$(DATE) ######### Call the SNPs for '$<' #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T HaplotypeCaller -I $< --genotyping_mode DISCOVERY -L $(EXOME_TRACK) -nct $(NT_MINUS_ONE) -R $(REF) $(HaplotypeCallerQualityArguments) --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx


rule gatk_SelectVariants:
    # Separate SNPs and Indels from
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        vcf="{prefix}%s%s/{sample}.{program}.raw_calls.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_HaplotypeCaller']),
    output:
        vcf="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps|indels}.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_SelectVariants']),
        idx="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps|indels}.vcf.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_SelectVariants']),
    log:
        "{prefix}%s%s/{sample}.{program}.raw.{snvtype}.log" % (config['dirs']['logs'], config['stepnames']['gatk_SelectVariants'])
    benchmark:
        "{prefix}%s%s/{sample}.{program}.raw.{snvtype}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_SelectVariants'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        3
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T SelectVariants"
        " -nt {threads}"
        ' --selectTypeToInclude $(echo "{wildcards.snvtype}" | tr "[:lower:]" "[:upper:]" | rev | cut -b 2- | rev) '
        " --variant {input.vcf}"
        " -R {input.references[0]}"
        " --out {output.vcf}"
        " 2>> {log}"

        # %.gatk.raw.snps.vcf : %.gatk.raw_calls.vcf
        # 	@echo "$(DATE) ######### Separate SNPs and Indels from '$<'. #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T SelectVariants -nt $(NT_HALF) --selectTypeToInclude SNP --variant $< -R $(REF) --out $@.tmp  $(OUTPUT_TO_LOG) \
        #
        # %.gatk.raw.indels.vcf : %.gatk.raw_calls.vcf
        # 	@echo "$(DATE) ######### Separate SNPs and Indels from '$<'. #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T SelectVariants -nt $(NT_HALF) --selectTypeToInclude INDEL --variant $< -R $(REF) --out $@.tmp  $(OUTPUT_TO_LOG) \
        #
        # %.ptp.raw.indels.vcf : %.ptp.raw.vcf
        # 	@echo "$(DATE) ######### Extract Platypus Indels from raw file '$<'. #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T SelectVariants -nt $(NUM_THREADS) --selectTypeToInclude INDEL --variant $< -R $(REF) --out $@.tmp  $(OUTPUT_TO_LOG) \

        # #### 2 raw.indels.vcf <- Select(raw.vcf, INDEL)
        # %.gatk.raw.indels.vcf : %.gatk.raw_calls.vcf
        # 	@echo "$(DATE) ######### Separate SNPs and Indels from '$<'. #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T SelectVariants -nt $(NT_HALF) --selectTypeToInclude INDEL --variant $< -R $(REF) --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx


rule gatk_VariantRecalibrator_SNP:
    # 3 snp.model <- BuildErrorModelWithVQSR(raw.snps.vcf)
    # SNP Variant recalibration Step 1 of 2: Compute VSQLOD Score for the SNPs
    input:
        rules.gatk_SelectVariants.output.vcf,
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        vcf=rules.gatk_SelectVariants.output.vcf,
        knowns=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], known['file'], ending) for known in get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'VariantRecalibrator_SNP') for ending in ['', ('.tbi' if known['file'].endswith('.gz') else '.idx')]],
    output:
        recal="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps}.recal" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        recalidx="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps}.recal.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        tranches="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps}.tranches" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        tranchespdf="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps}.tranches.pdf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        plots="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps}.plots.R" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        plotspdf="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,snps}.plots.R.pdf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
    log:
        "{prefix}%s%s_SNP/{sample}.{program}.{snvtype}.log" % (config['dirs']['logs'], config['stepnames']['gatk_VariantRecalibrator'])
    benchmark:
        "{prefix}%s%s_SNP/{sample}.{program}.{snvtype}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_VariantRecalibrator'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1  # we need to fix the number of threads to 1, since otherwise results are non-deterministic across multiple runs, i.e. not reproducible!!
    params:
        knowns_settings=lambda wildcards: [' --resource:%s %s%s%s' % (known['VariantRecalibrator_SNP'], wildcards.prefix, config['dirs']['references'], known['file']) for known in get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'VariantRecalibrator_SNP')],
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi'
        " && maxGaussians=6"
        " && while true; do"
        " java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T VariantRecalibrator"
        " -nt {threads}"
        " --input {input.vcf}"
        " -R {input.references[0]}"
        " -mode SNP"
        "{params.knowns_settings}"
        " -an DP -an QD -an FS -an SOR -an MQ -an MQRankSum -an ReadPosRankSum"
        " --recal_file {output.recal}"
        " --tranches_file {output.tranches}"
        " --rscript_file {output.plots}"
        " --maxGaussians $maxGaussians"
        " 2>> {log};"
        " let maxGaussians--;"
        " if [ $maxGaussians -lt 1]; then break; fi;"
        " if ! cat {log} | grep 'VariantDataManager' | tail -n 1 | grep 'Training with worst 0 scoring variants'; then break; fi;"
        " echo 'SPIKE: repeat computation with less clusters to expect' >> {log};"
        " done;"

        # %.gatk.raw.snps.recal: %.gatk.raw.snps.vcf
        # 	@echo "$(DATE) ######### Create variant recalibration files for '$<'. This is step 1 of 2 for SNP variant recalibration #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T VariantRecalibrator -nt $(NT_HALF) --input $< -R $(REF) --mode SNP --resource:hapmap,VCF,known=false,training=true,truth=true,prior=12.0 $(GATKRES_PATH_2k15)/hapmap_3.3.b37.vcf --resource:omni,VCF,known=false,training=true,truth=false,prior=10.0 $(GATKRES_PATH_2k15)/1000G_phase1.snps.high_confidence.b37.vcf --resource:omni,VCF,known=false,training=true,truth=false,prior=12.0 $(GATKRES_PATH_2k15)/1000G_omni2.5.b37.vcf --resource:dbsnp,VCF,known=true,training=false,truth=false,prior=2.0 $(GATKRES_PATH_2k15)/dbsnp_138.b37.vcf --resource:mills,VCF,known=false,training=true,truth=true,prior=12.0 $(GATKRES_PATH_2k15)/Mills_and_1000G_gold_standard.indels.b37.vcf -an DP -an QD -an FS -an SOR -an MQ -an MQRankSum -an ReadPosRankSum --recal_file $@.tmp --tranches_file $@.tranches.tmp --rscript_file $@.plots.R.tmp --maxGaussians 6 $(OUTPUT_TO_LOG) \
        # 	&& (mv $@.tmp $@ ; mv $@.tranches.tmp $@.tranches ; mv $@.plots.R.tmp $@.plots.R)
        # 	-mv $@.plots.R.tmp.pdf $@.plots.R.pdf
        # 	-mv $@.tranches.tmp.pdf $@.tranches.pdf


rule gatk_VariantRecalibrator_INDEL:
    # 3 snp.model <- BuildErrorModelWithVQSR(raw.snps.vcf)
    # SNP Variant recalibration Step 1 of 2: Compute VSQLOD Score for the SNPs
    input:
        knowns=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], known['file'], ending) for known in get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'VariantRecalibrator_INDEL') for ending in ['', ('.tbi' if known['file'].endswith('.gz') else '.idx')]],
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        vcf=rules.gatk_SelectVariants.output.vcf,
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
    output:
        recal="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,indels}.recal" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        recalidx="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,indels}.recal.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        tranches="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,indels}.tranches" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        #INFO  09:58:02,727 VariantRecalibrator - Tranches plot will not be generated since we are running in INDEL mode
        #tranchespdf="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,indels}.tranches.pdf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        plots="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,indels}.plots.R" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        plotspdf="{prefix}%s%s/{sample}.{program,gatk|ptp}.raw.{snvtype,indels}.plots.R.pdf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
    log:
        "{prefix}%s%s_INDEL/{sample}.{program}.{snvtype}.log" % (config['dirs']['logs'], config['stepnames']['gatk_VariantRecalibrator'])
    benchmark:
        "{prefix}%s%s_INDEL/{sample}.{program}.{snvtype}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_VariantRecalibrator'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1  # we need to fix the number of threads to 1, since otherwise results are non-deterministic across multiple runs, i.e. not reproducible!!
    params:
        knowns_settings=lambda wildcards: [' --resource:%s %s%s%s' % (known['VariantRecalibrator_INDEL'], wildcards.prefix, config['dirs']['references'], known['file']) for known in get_reference_knowns(wildcards.sample, SAMPLESHEETS, config, 'VariantRecalibrator_INDEL')],
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T VariantRecalibrator"
        " -nt {threads}"
        " --input {input.vcf}"
        " -R {input.references[0]}"
        " -mode INDEL"
        "{params.knowns_settings}"
        " --maxGaussians 2 -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 -an QD -an DP -an FS -an SOR -an MQRankSum -an ReadPosRankSum"
        " --recal_file {output.recal}"
        " --tranches_file {output.tranches}"
        " --rscript_file {output.plots}"
        " 2>> {log}"

        # %.gatk.raw.indels.recal: %.gatk.raw.indels.vcf
        # 	@echo "$(DATE) ######### Create recalibration files for '$<'. This is step 1 of 2 for indel recalibration #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T VariantRecalibrator -nt $(NT_HALF) --input $< -R $(REF) --mode INDEL -resource:mills,known=true,training=true,truth=true,prior=12.0 $(GATKRES_PATH_2k15)/Mills_and_1000G_gold_standard.indels.b37.vcf -resource:1000G,known=false,training=true,truth=false,prior=10.0 $(GATKRES_PATH_2k15)/1000G_phase1.indels.b37.vcf --maxGaussians 2 -tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 90.0 -an QD -an DP -an FS -an SOR -an MQRankSum -an ReadPosRankSum --recal_file $@.tmp --tranches_file $@.tranches.tmp --rscript_file $@.plots.R.tmp $(OUTPUT_TO_LOG) \
        # 	&& (mv $@.tmp $@ ; mv $@.tranches.tmp $@.tranches ; mv $@.plots.R.tmp $@.plots.R)
        # 	-mv $@.plots.R.tmp.pdf $@.plots.R.pdf
        # 	-mv $@.tranches.tmp.pdf $@.tranches.pdf


rule gatk_ApplyRecalibration:
    # Apply SNP Variant recalibration Step 2 of 2
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        vcf=rules.gatk_SelectVariants.output.vcf,
        #vcf="{prefix}%s%s/{sample}.{program}.raw.{snvtype}.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_SelectVariants']),
        recal="{prefix}%s%s/{sample}.{program}.raw.{snvtype}.recal" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
        tranches="{prefix}%s%s/{sample}.{program}.raw.{snvtype}.tranches" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantRecalibrator']),
    output:
        vcf="{prefix}%s%s/{sample}.{program,gatk}{isrelax,\.relax|}.recal.{snvtype,snps|indels}.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_ApplyRecalibration']),
        idx="{prefix}%s%s/{sample}.{program,gatk}{isrelax,\.relax|}.recal.{snvtype,snps|indels}.vcf.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_ApplyRecalibration']),
    log:
        "{prefix}%s%s/{sample}.{program}{isrelax}.{snvtype}.log" % (config['dirs']['logs'], config['stepnames']['gatk_ApplyRecalibration'])
    benchmark:
        "{prefix}%s%s/{sample}.{program}{isrelax}.{snvtype}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_ApplyRecalibration'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        3
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T ApplyRecalibration"
        ' --mode $(echo "{wildcards.snvtype}" | tr "[:lower:]" "[:upper:]" | rev | cut -b 2- | rev) '
        " --input {input.vcf}"
        " -R {input.references[0]}"
        ' --ts_filter_level $(if [ "{wildcards.isrelax}" == "" ]; then echo "90.0"; else echo "99.0"; fi)'
        " -tranchesFile {input.tranches}"
        " -recalFile {input.recal}"
        " -nt {threads}"
        " --out {output.vcf}"
        " 2>> {log}"

        # #### 4 recalibratedSNPs.vcf <- ApplyRecalibration(raw.snps.vcf, snp.model)
        # # Apply SNP Variant recalibration Step 2 of 2
        # %.gatk.recal.snps.vcf: %.gatk.raw.snps.vcf %.gatk.raw.snps.recal
        # 	@echo "$(DATE) ######### Apply the variant recalibration to '$@'. This is step 2 of 2 for variant recalibration #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T ApplyRecalibration --mode SNP --input $< -R $(REF) --ts_filter_level 90.0 -tranchesFile $(<:.vcf=.recal.tranches) -recalFile $(<:.vcf=.recal) --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx
        # #fix the index file name
        #
        # %.gatk.recal.indels.vcf: %.gatk.raw.indels.vcf %.gatk.raw.indels.recal
        # 	@echo "$(DATE) ######### Apply the variant recalibration to '$@'. This is step 2 of 2 for variant recalibration #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T ApplyRecalibration --mode INDEL --input $< -R $(REF) --ts_filter_level 90.0 -tranchesFile $(<:.vcf=.recal.tranches) -recalFile $(<:.vcf=.recal) --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx

        # ####since there have been some issues with little sensitivity, perform the recalibration model again with more relaxed settings
        # #### 4 recalibratedSNPs.vcf <- ApplyRecalibration(raw.snps.vcf, snp.model)
        # # Apply SNP Variant recalibration Step 2 of 2
        # %.gatk.relax.recal.snps.vcf: %.gatk.raw.snps.vcf %.gatk.raw.snps.recal
        # 	@echo "$(DATE) ######### Apply the relaxed variant recalibration to '$@'. This is step 2 of 2 for variant recalibration #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T ApplyRecalibration --mode SNP --input $< -R $(REF) --ts_filter_level 99.0 -tranchesFile $(<:.vcf=.recal.tranches) -recalFile $(<:.vcf=.recal) --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx
        # #fix the index file name


rule gatk_VariantFiltration_SNP:
    # Apply SNP Variant recalibration Step 2 of 2
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        vcf=rules.gatk_ApplyRecalibration.output.vcf,
    output:
        vcf="{prefix}%s%s/{sample}.{program,gatk}{isrelax,\.relax|}.hf.recal.{snvtype,snps}.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantFiltration']),
        idx="{prefix}%s%s/{sample}.{program,gatk}{isrelax,\.relax|}.hf.recal.{snvtype,snps}.vcf.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantFiltration']),
    log:
        "{prefix}%s%s_SNP/{sample}.{program}{isrelax}.{snvtype}.log" % (config['dirs']['logs'], config['stepnames']['gatk_VariantFiltration'])
    benchmark:
        "{prefix}%s%s_SNP/{sample}.{program}{isrelax}.{snvtype}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_VariantFiltration'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T VariantFiltration"
        " -V {input.vcf}"
        " -R {input.references[0]}"
        ' --filterExpression "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0"'
        ' --filterName "LC_SB_MQ_Reapos_Filter"'
        " --out {output.vcf}"
        " 2>> {log}"

        # %.gatk.hf.recal.snps.vcf: %.gatk.recal.snps.vcf
        # 	@echo "$(DATE) ######### Hard filtering SNPs at end of read or with strand bias for '$@'.  #########"
        # 	/opt/Oracle_Java/jre1.7.0_51/bin/java -jar /data/biotools/src/GenomeAnalysisTK-3.5/GenomeAnalysisTK.jar -T VariantFiltration -V $< -R $(REF) --filterExpression "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0" --filterName "LC_SB_MQ_Reapos_Filter" --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx
        #
        # 	#do the same for relaxed recalibration model
        # %.gatk.relax.hf.recal.snps.vcf: %.gatk.relax.recal.snps.vcf
        # 	@echo "$(DATE) ######### Hard filtering relaxed SNPs at end of read or with strand bias for '$@'.  #########"
        # 	/opt/Oracle_Java/jre1.7.0_51/bin/java -jar /data/biotools/src/GenomeAnalysisTK-3.5/GenomeAnalysisTK.jar -T VariantFiltration -V $< -R $(REF) --filterExpression "QD < 2.0 || FS > 60.0 || MQ < 40.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0" --filterName "LC_SB_MQ_Reapos_Filter" --out $@.tmp  $(OUTPUT_TO_LOG) \
        # 	&& mv $@.tmp $@
        # 	-mv $@.tmp.idx $@.idx


rule gatk_VariantFiltration_INDEL:
    # Apply SNP Variant recalibration Step 2 of 2
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        vcf=lambda wildcards: "%s%s%s/%s.%s%s.%s.%s.vcf" % (
            wildcards.prefix,
            config['dirs']['intermediate'],
            config['stepnames']['gatk_ApplyRecalibration'] if wildcards.program == "gatk" else config['stepnames']['gatk_SelectVariants'],
            wildcards.sample,
            wildcards.program,
            wildcards.isrelax,
            'recal' if wildcards.program == "gatk" else 'raw',
            wildcards.snvtype),
    output:
        vcf="{prefix}%s%s/{sample}.{program,gatk|ptp}{isrelax,.{0}}.filtered.{snvtype,indels}.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantFiltration']),
        idx="{prefix}%s%s/{sample}.{program,gatk|ptp}{isrelax,.{0}}.filtered.{snvtype,indels}.vcf.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantFiltration']),
    log:
        "{prefix}%s%s_INDEL/{sample}.{program}{isrelax}.{snvtype}.log" % (config['dirs']['logs'], config['stepnames']['gatk_VariantFiltration'])
    benchmark:
        "{prefix}%s%s_INDEL/{sample}.{program}{isrelax}.{snvtype}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_VariantFiltration'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T VariantFiltration"
        " -R {input.references[0]}"
        " --variant {input.vcf}"
        ' --filterExpression "QD < 2.0"'
        ' --filterExpression "ReadPosRankSum < -20.0"'
        ' --filterExpression "FS > 200.0"'
        ' --filterName QDFilter'
        ' --filterName ReadPosFilter'
        ' --filterName FSFilter'
        " --out {output.vcf}"
        " 2>> {log}"

        # #### 5 filteredIndels.vcf <- Filter(raw.indels.vcf)
        # %.gatk.filtered.indels.vcf: %.gatk.recal.indels.vcf
        # 	@echo "$(DATE) ######### Do a hard filtering of the indels in '$<'. #########"
        # 	/opt/Oracle_Java/jre1.7.0_51/bin/java -jar /data/biotools/src/GenomeAnalysisTK-3.5/GenomeAnalysisTK.jar -T VariantFiltration -R $(REF) --variant $<  --filterExpression "QD < 2.0" --filterExpression "ReadPosRankSum < -20.0" --filterExpression "FS > 200.0" --filterName QDFilter --filterName ReadPosFilter  --filterName FSFilter  --out $@ $(OUTPUT_TO_LOG)
        # # here is a problem that gatk.sh (or more exactly the bash) swallows the "" from the command line. this way FS > 200.0 looks for gatk as three parameters. As quick workaround, we directly call the gatk for this command.
        # #another thing is, that the VariantFiltration (GATK v1.4-17-gd5199db) causes warnings:
        # # WARN  10:43:03,168 Interpreter - org.broadinstitute.sting.utils.variantcontext.VariantContextUtils.initializeMatchExps@310![0,14]: 'ReadPosRankSum < -20.0;' undefined variable ReadPosRankSum
        # # This value is missing in some calls since the read position rank sum test can not be calculated for homozygous sites.
        #
        # %.ptp.filtered.indels.vcf: %.ptp.raw.indels.vcf
        # 	@echo "$(DATE) ######### Do a hard filtering of the indels in '$<'. #########"
        # 	/opt/Oracle_Java/jre1.7.0_51/bin/java -jar /data/biotools/src/GenomeAnalysisTK-3.5/GenomeAnalysisTK.jar -T VariantFiltration -R $(REF) --variant $<  --filterExpression "QD < 2.0" --filterExpression "ReadPosRankSum < -20.0" --filterExpression "FS > 200.0" --filterName QDFilter --filterName ReadPosFilter  --filterName FSFilter  --out $@ $(OUTPUT_TO_LOG)


rule gatk_CombineVariants:
    # Join postprocessed snps and indels to
    input:
        gatkpackage="%s%sgatk-3.5.tar.bz2" % (config['dirs']['prefix'], config['dirs']['references']),
        references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, SAMPLESHEETS, config)['file'], ending) for ending in config['endings_bwa']],
        indels="{prefix}%s%s/{sample}.gatk.filtered.indels.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantFiltration']),
        snps="{prefix}%s%s/{sample}.gatk{isrelax}.hf.recal.snps.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_VariantFiltration']),
    output:
        vcf="{prefix}%s%s/{sample}.{program,gatk}{isrelax,\.relax|}.snp_indel.vcf" % (config['dirs']['intermediate'], config['stepnames']['gatk_CombineVariants']),
        idx="{prefix}%s%s/{sample}.{program,gatk}{isrelax,\.relax|}.snp_indel.vcf.idx" % (config['dirs']['intermediate'], config['stepnames']['gatk_CombineVariants']),
    log:
        "{prefix}%s%s/{sample}.{program}{isrelax}.log" % (config['dirs']['logs'], config['stepnames']['gatk_VariantFiltration'])
    benchmark:
        "{prefix}%s%s/{sample}.{program}{isrelax}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_VariantFiltration'])
    conda:
        "envs/spike_gatk.yaml"
    threads:
        1
    shell:
        'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {input.gatkpackage} 2>> {log}; fi && '
        "java"
        " -Xmx6g -XX:ParallelGCThreads={threads}"
        " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
        " -T CombineVariants"
        " --assumeIdenticalSamples"
        " -R {input.references[0]}"
        " --variant {input.indels}"
        " --variant {input.snps}"
        " --out {output.vcf}"
        " 2>> {log}"

        # #### 6 analysisReady.vcf <- CombineTogether(recalibratedSNPs.vcf, filteredIndels.vcf)
        # %.gatk.snp_indel.vcf: %.gatk.filtered.indels.vcf %.gatk.hf.recal.snps.vcf
        # 	@echo "$(DATE) ######### Join postprocessed snps and indels to '$@'. #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T CombineVariants --assumeIdenticalSamples -R $(REF) $(foreach vcf_file,$^,--variant $(vcf_file))  --out $@  $(OUTPUT_TO_LOG)
        #
        #
        # #### 6 analysisReady.vcf <- CombineTogether(recalibratedSNPs.vcf, filteredIndels.vcf)
        # %.gatk.relax.snp_indel.vcf: %.gatk.filtered.indels.vcf %.gatk.relax.hf.recal.snps.vcf
        # 	@echo "$(DATE) ######### Join postprocessed snps and indels to '$@'. #########"
        # 	gatk_2015.sh GenomeAnalysisTK.jar -T CombineVariants --assumeIdenticalSamples -R $(REF) $(foreach vcf_file,$^,--variant $(vcf_file))  --out $@  $(OUTPUT_TO_LOG)


# rule gatk_DepthOfCoverage:
#     # QC: Calculate Exome Coverage for
#     input:
#         rules.gatk_RealignerTargetCreator.input.gatkpackage,
#         references=lambda wildcards: ["%s%s%s%s" % (wildcards.prefix, config['dirs']['references'], get_reference_genome(wildcards.sample, config)['file'], ending) for ending in config['endings_bwa']],
#         exometrack=lambda wildcards: "%s%s%s" % (config['dirs']['prefix'], config['dirs']['references'], get_reference_exometrack(wildcards.sample, config)),
#         geneset="%s%srefGene-b37-sorted.txt" % (config['dirs']['prefix'], config['dirs']['references']),
#         bam=rules.gatk_PrintReads.output.bam
#     output:
#         csv="{prefix}%s%s/{sample}_exome_coverage.sample_summary.csv" % (config['dirs']['intermediate'], config['stepnames']['gatk_DepthOfCoverage']),
#         png="{prefix}%s%s/{sample}_exome_coverage.sample_summary.png" % (config['dirs']['intermediate'], config['stepnames']['gatk_DepthOfCoverage']),
#     benchmark:
#         "{prefix}%s{sample}.%s.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['gatk_DepthOfCoverage'])
#     log:
#         "{prefix}%s{sample}.%s.log" % (config['dirs']['logs'], config['stepnames']['gatk_DepthOfCoverage'])
#     conda:
#         "envs/spike_gatk.yaml"
#     threads:
#         1
#     shell:
#         'if [ $(gatk-register > /dev/null; echo "$?") -eq 1 ]; then rm -rf /tmp/gatk; gatk-register {rules.gatk_RealignerTargetCreator.input.gatkpackage} 2>> {log}; fi && '
#         "java"
#         " -Xmx6g -XX:ParallelGCThreads={threads}"
#         " -jar $CONDA_PREFIX/opt/gatk-3.5/GenomeAnalysisTK.jar"
#         " -T DepthOfCoverage"
#         " -I {input.bam}"
#         " -R {input.references[0]}"
#         " -L {input.exometrack}"
#         " --calculateCoverageOverGenes {input.geneset}"
#         " --omitDepthOutputAtEachBase"
#         " --summaryCoverageThreshold 10"
#         " --summaryCoverageThreshold 20"
#         " --summaryCoverageThreshold 30"
#         " --summaryCoverageThreshold 40"
#         " --summaryCoverageThreshold 50"
#         " --minBaseQuality 20"
#         " --minMappingQuality 30"
#         " --start 1"
#         " --stop 500"
#         " --nBins 499"
#         " -dt NONE"
#         " -o {output.csv}"
#         " 2>> {log}"
#
#         # %_exome_coverage.sample_summary: %.srt.bam
#         # 	@echo "$(DATE) ######### QC: Calculate Exome Coverage for '$<' #########"
#         # 	gatk_2015.sh GenomeAnalysisTK.jar -T DepthOfCoverage -I $<  -R $(REF) -L $(EXOME_TRACK) --calculateCoverageOverGenes $(GATKRES_PATH_2k15)/refGene-b37-sorted.txt --omitDepthOutputAtEachBase --summaryCoverageThreshold 10 --summaryCoverageThreshold 20 --summaryCoverageThreshold 30 --summaryCoverageThreshold 40 --summaryCoverageThreshold 50 --minBaseQuality 20 --minMappingQuality 30 --start 1 --stop 500 --nBins 499 -dt NONE -o $@ $(OUTPUT_TO_LOG)


rule check_coverage:
    input:
        lambda wildcards: ["%s%s%s/%s.exome_coverage.csv" % (wildcards.prefix, config['dirs']['intermediate'], config['stepnames']['exome_coverage'], sample['sample'])
                           for sample in get_samples(SAMPLESHEETS, config)
                           if sample['Sample_Project'] == wildcards.project]
    output:
        "{prefix}%s%s/{project}.exome_coverage.pdf" % (config['dirs']['intermediate'], config['stepnames']['exome_coverage'])
    log:
        "{prefix}%s%s/{project}.log" % (config['dirs']['logs'], config['stepnames']['check_coverage'])
    benchmark:
        "{prefix}%s%s/{project}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['check_coverage'])
    run:
        report_exome_coverage(input, output[0], min_coverage=get_min_coverage(wildcards.project, config))
