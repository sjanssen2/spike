rule trim:
    input:
        forward="{prefix}%s%s/{sample}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples']),
        reverse="{prefix}%s%s/{sample}_R3.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples'])
    output:
        pairedforward="{prefix}%s%s/Paired/{sample, .*?}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['trim']),
        pairedreverse="{prefix}%s%s/Paired/{sample, .*?}_R2.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['trim']),
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['trim'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['trim'])
    conda:
      "envs/spike_trim.yaml"
    threads:
        16
    params:
        unpairedforward="{prefix}%s%s/Unpaired/{sample, .*?}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['trim']),
        unpairedreverse="{prefix}%s%s/Unpaired/{sample, .*?}_R2.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['trim'])
    shell:
        # if project directory for unpaired reads does not exist, we have to create it here since it is no regular snakemake output
        "mkdir -p `dirname {params.unpairedforward}` 2> {log}"
        " & java"
        " -Xmx4g"
        " -XX:ParallelGCThreads={threads}"
        " -jar ${{CONDA_PREFIX}}/share/trimmomatic-0.39-1/trimmomatic.jar"
        " PE -threads {threads} -phred33"
        " {input.forward}"
        " {input.reverse}"
        " {output.pairedforward}"
        " {params.unpairedforward}"
        " {output.pairedreverse}"
        " {params.unpairedreverse}"
        " ILLUMINACLIP:${{CONDA_PREFIX}}/share/trimmomatic-0.39-1/adapters/TruSeq3-PE.fa:2:30:10 CROP:149 LEADING:10 TRAILING:10 SLIDINGWINDOW:4:15 MINLEN:54"
        " >> {log} 2>&1"

rule trim_singleend:
    input:
        forward="{prefix}%s%s/{sample}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples']),
    output:
        unpairedforward="{prefix}%s%s/Unpaired/{sample, .*?}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['trim']),
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['trim'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['trim'])
    conda:
      "envs/spike_trim.yaml"
    threads:
        16
    shell:
        "java"
        " -Xmx4g"
        " -XX:ParallelGCThreads={threads}"
        " -jar ${{CONDA_PREFIX}}/share/trimmomatic-0.33-1/trimmomatic.jar"
        " SE -threads {threads} -phred33"
        " {input.forward}"
        " {output.unpairedforward}"
        " ILLUMINACLIP:${{CONDA_PREFIX}}/share/trimmomatic-0.33-1/adapters/TruSeq3-SE.fa:2:30:10 CROP:99 LEADING:10 TRAILING:10 SLIDINGWINDOW:4:15 MINLEN:36"
        " > {log} 2>&1"

rule remove_16s_primer:
    input:
        forward="{prefix}%s%s/{sample}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples']),
        reverse="{prefix}%s%s/{sample}_R2.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['rejoin_samples'])
    output:
        forward="{prefix}%s%s/{sample, .*?}_R1.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['remove_16s_primer']),
        reverse="{prefix}%s%s/{sample, .*?}_R2.fastq.gz" % (config['dirs']['intermediate'], config['stepnames']['remove_16s_primer']),
    log:
        "{prefix}%s%s/{sample}.log" % (config['dirs']['logs'], config['stepnames']['remove_16s_primer'])
    benchmark:
        "{prefix}%s%s/{sample}.benchmark" % (config['dirs']['benchmarks'], config['stepnames']['remove_16s_primer'])
    conda:
      "envs/spike_remove_16s_primer.yaml"
    threads:
        1
    params:
        primer_forward="GTGYCAGCMGCCGCGGTAA",
        primer_reverse="GGACTACNVGGGTWTCTAAT",
    shell:
        'cutadapt'
        ' -g {params.primer_forward}'
        ' -G {params.primer_reverse}'
        ' -n 2'
        ' -o {output.forward}'
        ' -p {output.reverse}'
        ' {input.forward}'
        ' {input.forward} 2> {log}'
